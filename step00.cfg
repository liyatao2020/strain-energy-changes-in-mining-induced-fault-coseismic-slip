# ----------------------------------------------------------------------
# Output of parameters used and simulation progress.
# ----------------------------------------------------------------------
[pylithapp]
dump_parameters.filename = output/parameters.json
problem.progress_monitor.filename = output/progress.txt

[pylithapp.problem.normalizer]
length_scale = 1.0*m

[pylithapp.problem.formulation]
# Fault friction is a nonlinear problem so we need to use the nonlinear solver.
solver = pylith.problems.SolverNonlinear

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent.formulation.time_step]
total_time = 0*s
dt = 0.1*s

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.timedependent]
bc = [boundary_west, boundary_east_crust, boundary_bottom_crust, y_pos]

gravity_field = spatialdata.spatialdb.GravityField
[pylithapp.timedependent.gravity_field]
acceleration = 10.0*m*s**-2
gravity_dir = [0, -1, 0] 

# For all boundaries, we fix the displacement normal to the boundary
# (roller boundary condition) by retaining the default ZeroDispDB,
# which specifies a zero value.
[pylithapp.timedependent.bc]
boundary_east_crust = pylith.bc.Neumann

[pylithapp.timedependent.bc.boundary_east_crust]
label = bndry_east_crust
db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Neumann BC on +x
db_initial.iohandler.filename = tractions_axial_shear.spatialdb

output.cell_info_fields = [initial_value]
output.writer.filename = output/traction.vtk
output.cell_filter = pylith.meshio.CellFilterAvg

# We must specify quadrature information for the cell faces.
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 1

# West boundary
[pylithapp.timedependent.bc.boundary_west]
bc_dof = [0]
label = bndry_west
db_initial.label = Dirichlet BC on west boundary

# Bottom boundary
[pylithapp.timedependent.bc.boundary_bottom_crust]
bc_dof = [1]
label = bndry_bot_slab
db_initial.label = Dirichlet BC on bottom boundary 


# +y face -- change bc type to Neumann
[pylithapp.timedependent.bc]
y_pos = pylith.bc.Neumann

[pylithapp.timedependent.bc.y_pos]
label = groundsurf

db_change = spatialdata.spatialdb.SimpleDB
db_change.label = Amplitude of Neumann BC on +y
db_change.iohandler.filename = tractions_axial_pressure.spatialdb
# Use linear interpolation
db_change.query_type = linear

th_change = spatialdata.spatialdb.TimeHistory
th_change.label = Time history for Neumann BC on +y
th_change.filename = loadcycle.timedb

# We must specify quadrature information for the cell faces.
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1
quadrature.cell.quad_order = 1

# Because normal for +y surface is [0,1], the horizontal and
# vertical shear directions are ambiguous. We provide a "fake" up
# direction of [0,1,0] so that the horizontal shear direction ("up" x
# normal) is [1,0,0] and the vertical shear direction (normal x horiz
# shear dir) is [0,1,0].
# up_dir = [0,1,0]
# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.timedependent]
interfaces = [fault]

[pylithapp.timedependent.implicit]
solver = pylith.problems.SolverNonlinear

[pylithapp.timedependent.interfaces]
fault = pylith.faults.FaultCohesiveDyn

# Slab top --------------------
[pylithapp.timedependent.interfaces.fault]
id = 22
label = fault_slabtop

# We must define the quadrature information for fault cells.
# The fault cells are 1D (line).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 1

# Friction
friction = pylith.friction.SlipWeakening
friction.label = Slip weakening
# Force healing after each time step, so weakening is confined to each
# time step and is not carried over into subsequent time steps.
friction.force_healing = False

friction.db_properties = spatialdata.spatialdb.SimpleGridDB
friction.db_properties.label = Slip weakening
friction.db_properties.filename = fault_slipweakening.spatialdb

## traction
traction_perturbation = pylith.faults.TractPerturbation

[pylithapp.timedependent.interfaces.fault.traction_perturbation]
# Initial fault tractions
db_initial = spatialdata.spatialdb.SimpleGridDB
db_initial.label = Initial fault tractions
db_initial.filename = fault_tractions.spatialdb


db_rate = spatialdata.spatialdb.SimpleGridDB
db_rate.label = Fault traction perturbation rate
db_rate.filename = fault_traction_rate.spatialdb

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
[pylithapp.problem.formulation.output.domain]
writer.filename = output/model-all-disp.h5

[pylithapp.problem.formulation.output.subdomain]
writer.filename = output/groundsurf.h5

# Faults
[pylithapp.problem.interfaces.fault.output]
writer = pylith.meshio.DataWriterHDF5
writer.filename = output/fault_traction.h5
vertex_data_fields = [slip, slip_rate, traction]

# Materials
[pylithapp.timedependent.materials.mat_footwall.output]
writer.filename = output/material-footwall.h5

[pylithapp.timedependent.materials.mat_hangingwall.output]
writer.filename = output/material-hangingwall.h5

[pylithapp.petsc]
# Convergence parameters.
ksp_rtol = 1.0e-8
ksp_atol = 1.0e-12
ksp_max_it = 200000
ksp_gmres_restart = 50

snes_rtol = 1.0e-8
snes_atol = 1.0e-12

snes_max_it = 200000

# Friction sensitivity solve used to compute the increment in slip
# associated with changes in the Lagrange multiplier imposed by the
# fault constitutive model.
friction_pc_type = asm
friction_sub_pc_factor_shift_type = nonzero
friction_ksp_max_it = 2500
friction_ksp_gmres_restart = 3000
friction_ksp_error_if_not_converged = true

# Uncomment to view details of friction sensitivity solve.
#friction_ksp_monitor = true
#friction_ksp_view = true
friction_ksp_converged_reason = true

# End of file
